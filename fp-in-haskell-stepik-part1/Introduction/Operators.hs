module Operators where

-- > max 5 6
-- > max 6 7
-- > 6 7
-- > 6 `max` 7
-- > (+) 6 7
-- > - 7
-- > (-) 5 3
-- > max (-5) 5

-- > 3 + 5 * 8
-- ~ 43
-- > sin 5 + 4
-- > (3 - 9) - 5
-- > 3 - (9 - 5)
-- > 3 - 9 - 5

-- From standard library
--infixr 8  ^, `logBase`
--infixl 7 *, /, `div`, `mod`
--infixl 6 +, -
--infix  4 ==, /=, >, >=, <, <=
--infixr 0 $


-- 2 ^ 3 ^ 2
-- ~ 2 ^ 9
-- ~ 512

-- (*) 2 ((+) 1 4) ^ 2
-- ~ (2 * ((+) 1 4)) ^ 2
-- ~ (2 * (1 + 4)) ^ 2
-- ~ (2 * 5) ^ 2
-- ~ 10 ^ 2
-- ~ 100


{-
! # $ % & * + . / < = > ? @ \ ^ | - ~
-}

{-
:
-}

infixl 6 *+*

--(*+*) :: Num a => a -> a -> a
--a *+* b = a ^ 2 + b ^ 2

-- > 3 *+* 4
-- ~ 25

--(*+*) :: Num a => a -> a -> a
(*+*) a b = a ^ 2 + b ^ 2

-- > :r
-- > (*+*) 3 4
-- ~ 25


-- 1 + 3 *+* 2 * 2
-- ~ 4 *+* 2 * 2
-- ~ 4 *+* 4
-- ~ 32

-- >  5 |-| 7
-- ~ 2

--(|-|) :: (Ord a, Num a) => a -> a -> a
x |-| y = if x - y >= 0 then x - y else y - x


-- > (2 /) 4
-- ~ 0.5
-- > (/ 2) 4
-- ~ 2.0
-- > (-2)
-- ~ -2


-- (`mod` 14) ((+ 5) 10)
-- ~ (`mod` 14) (5 + 10)
-- ~ (`mod` 14) 15
-- ~ mod 15 14
-- ~ 1


--f $ x = f x

-- > sin 0
-- > sin $ 0
-- > sin (pi / 2)
-- ~ 1.0
-- > sin $ pi / 2
-- ~ 1.0

{- f (g x (h y)) == f $ g x (h y) == f $ g x $ h y -}


-- logBase 4 (min 20 (9 + 7))
-- ~ logBase 4 $ min 20 $ 9 + 7
